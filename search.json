[{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement ashbythorpe@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to nestedmodels","title":"Contributing to nestedmodels","text":"outlines propose change nestedmodels. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to nestedmodels","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to nestedmodels","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to nestedmodels","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ashbythorpe/nestedmodels\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to nestedmodels","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to nestedmodels","text":"Please note nestedmodels project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 nestedmodels authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"what-is-the-alternative","dir":"Articles","previous_headings":"","what":"What is the alternative?","title":"Nestedmodels Limitations","text":"datasets, issues problematic ignore. cases, alternative approach obvious: just use non-nested model. recipes package many methods dealing categorical data, models likely give promising results. However, models, notably forecasting algorithms, nestedmodels can seem like solution forecasting panel data. specific case, global forecasting method recommended (e.g. Prophet gradient boosting model), since models can deal categorical data. general, better find model suit needs, rather sticking one comfortable .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels-limitations.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Nestedmodels Limitations","text":"vignette, discussed conditions reasons nested modelling best approach every situation, respond case.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"what-is-nestedmodels","dir":"Articles","previous_headings":"","what":"What is nestedmodels?","title":"Getting started with nestedmodels","text":"nestedmodels extension ‘tidymodels’ framework. allows models workflows used nested data. provides alternative modeltime’s approach nested modelling ‘multilevelmod’ package, allowing model workflow used nested data easily.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"why-do-i-need-nestedmodels","dir":"Articles","previous_headings":"","what":"Why do I need nestedmodels?","title":"Getting started with nestedmodels","text":"best example may need use nestedmodels package working panel data. set time series, describing different object (historic prices set stocks, example), may want model time series separately, especially considering fact many time series modelling tools work well non-date predictors (furthermore, many models accept non-numeric predictors, although often better ways deal problem; see recipes::step_dummy()). scenario, nested modelling often best solution.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"how-does-nestedmodels-work","dir":"Articles","previous_headings":"","what":"How does nestedmodels work?","title":"Getting started with nestedmodels","text":"implementation nestedmodels simple. Fitting nested model fits model nested value (time series set stocks, model fitted stock). correct model selected used making predictions.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"a-quick-example","dir":"Articles","previous_headings":"","what":"A quick example","title":"Getting started with nestedmodels","text":"vignette, ’re going explore basic example nested model. ’re going need following packages: ’re going use example data included nestedmodels package. data simple, serves example data can nested, rather representing anything concrete. data can nested following way: Lets split data training testing set using nested_resamples() function. ensures training testing set contain data every ‘id’ value. Now let’s define model: Since ’re fitting model nested data, need way make model ‘nested’. simple nested() function. can fit model usual way. Note data must nested, formula include id column. Predicting can also done usual way (data predict can nested non-nested). Since just demonstration, use data model fitted . method fine, nest data pain. can solve using workflow. first define recipe, define step used nest data. time, formula can include ‘id’ column, since recipe needs act . little easier nesting data manually. Note recipe actually nest data, instead removes specified columns adds new column, ‘nest_id’, specifies nest row belongs . Now create workflow, combining recipe model. workflow can fitted way model, note since used step_nest() data nested. fit object can used make predictions. common parsnip functions can also used fitted nested models: really need know use nestedmodels package. models workflows can compared, fitted tuned much way normal models workflows - can even combine normal models using workflowsets stacks packages.","code":"library(nestedmodels) library(tidyr) library(parsnip) library(recipes) library(workflows) library(rsample) library(glmnet) data(\"example_nested_data\") data <- example_nested_data data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  48.5  29.1  44.7 50.0  #>  2     1     1    50  64.2  29.7  40.2 64.9  #>  3     1     1    51 -19.4  26.6  43.2 38.0  #>  4     1     1    52  41.0  28.8  66.4 61.7  #>  5     1     1    53 -94.2  23.9  18.2 -1.66 #>  6     1     1    54  72.6  30.0  83.8 38.8  #>  7     1     1    55 -91.5  24.0  91.7 40.7  #>  8     1     1    56 -50.5  25.5  79.8 55.4  #>  9     1     1    57  90.3  30.6  50.3 33.8  #> 10     1     1    58  32.4  28.6  25.4 20.5  #> # … with 990 more rows nested_data <- nest(data, data = -id) nested_data #> # A tibble: 20 × 2 #>       id data              #>    <int> <list>            #>  1     1 <tibble [50 × 6]> #>  2     2 <tibble [50 × 6]> #>  3     3 <tibble [50 × 6]> #>  4     4 <tibble [50 × 6]> #>  5     5 <tibble [50 × 6]> #>  6     6 <tibble [50 × 6]> #>  7     7 <tibble [50 × 6]> #>  8     8 <tibble [50 × 6]> #>  9     9 <tibble [50 × 6]> #> 10    10 <tibble [50 × 6]> #> 11    11 <tibble [50 × 6]> #> 12    12 <tibble [50 × 6]> #> 13    13 <tibble [50 × 6]> #> 14    14 <tibble [50 × 6]> #> 15    15 <tibble [50 × 6]> #> 16    16 <tibble [50 × 6]> #> 17    17 <tibble [50 × 6]> #> 18    18 <tibble [50 × 6]> #> 19    19 <tibble [50 × 6]> #> 20    20 <tibble [50 × 6]> split <- nested_resamples(nested_data, rsample::initial_split()) data_tr <- rsample::training(split) data_tst <- rsample::testing(split) model <- linear_reg(penalty = 0.1) %>%   set_engine(\"glmnet\") nested_model <- model %>%   nested() nested_model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Main Arguments: #>   penalty = 0.1 #>  #> Computational engine: glmnet nested_tr <- tidyr::nest(data_tr, data = -id) model_fit <- fit(nested_model, z ~ x + y + a + b, nested_tr) model_fit #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]> predict(model_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  34.9 #>  2  25.5 #>  3  34.6 #>  4  41.1 #>  5  33.7 #>  6  26.9 #>  7  26.5 #>  8  19.4 #>  9  33.1 #> 10  24.1 #> # … with 250 more rows recipe <- recipe(data_tr, z ~ x + y + a + b + id) %>%   step_nest(id) recipe %>%   prep() %>%   bake(NULL) #> # A tibble: 740 × 6 #>        x      y     a      b       z nest_id #>    <int>  <dbl> <dbl>  <dbl>   <dbl> <fct>   #>  1    66  46.0   30.4 60.6   21.2    Nest 1  #>  2    88 -11.9   58.2 55.9   45.3    Nest 1  #>  3    63   1.35  38.2 43.6   19.6    Nest 1  #>  4    53 -94.2   18.2 -1.66  23.9    Nest 1  #>  5    52  41.0   66.4 61.7   28.8    Nest 1  #>  6    84 -26.1   83.0 71.5   52.6    Nest 1  #>  7    94  89.9   26.5 54.7    5.14   Nest 1  #>  8    89 -50.4   10.0 67.0    0.0161 Nest 1  #>  9    82  47.3   25.6 62.0   55.3    Nest 1  #> 10    86 104.    63.8 -0.387 57.4    Nest 1  #> # … with 730 more rows wf <- workflow() %>%   add_model(nested_model) %>%   add_recipe(recipe) wf_fit <- fit(wf, data_tr) predict(wf_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  34.9 #>  2  25.5 #>  3  34.6 #>  4  41.1 #>  5  33.7 #>  6  26.9 #>  7  26.5 #>  8  19.4 #>  9  33.1 #> 10  24.1 #> # … with 250 more rows augment(wf_fit, data_tst) #> # A tibble: 260 × 8 #>       id   id2     x      y     z     a     b .pred #>    <int> <int> <int>  <dbl> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    50  64.2   29.7 40.2   64.9  34.9 #>  2     1     1    56 -50.5   25.5 79.8   55.4  25.5 #>  3     1     1    58  32.4   28.6 25.4   20.5  34.6 #>  4     1     1    62 109.    23.4  5.23  19.8  41.1 #>  5     1     1    67 113.    23.6 40.2   92.1  33.7 #>  6     1     1    68  43.8   21.1  2.76  55.4  26.9 #>  7     1     1    70  -8.65  35.7  3.10  12.6  26.5 #>  8     1     2    77 -18.8   52.9 13.8   51.9  19.4 #>  9     1     2    79  66.1   56.0 57.7   53.9  33.1 #> 10     1     2    85  -8.74  53.3 52.4   43.3  24.1 #> # … with 250 more rows tidy(wf_fit) #> # A tibble: 100 × 4 #>    nest_id term         estimate penalty #>    <fct>   <chr>           <dbl>   <dbl> #>  1 Nest 1  (Intercept)  42.0         0.1 #>  2 Nest 1  x            -0.184       0.1 #>  3 Nest 1  y             0.119       0.1 #>  4 Nest 1  a             0.0978      0.1 #>  5 Nest 1  b            -0.144       0.1 #>  6 Nest 2  (Intercept) -93.2         0.1 #>  7 Nest 2  x             0.710       0.1 #>  8 Nest 2  y            -0.00878     0.1 #>  9 Nest 2  a            -0.0898      0.1 #> 10 Nest 2  b             0.160       0.1 #> # … with 90 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/articles/nestedmodels.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Getting started with nestedmodels","text":"short vignette, simple example nested model workflow created used dummy data, demonstrate nestedmodels used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ashby Thorpe. Author, maintainer. Hadley Wickham. Contributor.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorpe (2023). nestedmodels: Tidy Modelling Nested Data. https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/.","code":"@Manual{,   title = {nestedmodels: Tidy Modelling for Nested Data},   author = {Ashby Thorpe},   year = {2023},   note = {https://github.com/ashbythorpe/nestedmodels, https://ashbythorpe.github.io/nestedmodels/}, }"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"nestedmodels-","dir":"","previous_headings":"","what":"Tidy Modelling for Nested Data","title":"Tidy Modelling for Nested Data","text":"goal nestedmodels allow modelling nested data. models accept certain predictors. panel data, often desirable create model panel. nestedmodels enhances ‘tidymodels’ set packages allowing user classify model ‘nested’.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Modelling for Nested Data","text":"","code":"# Install the released version on CRAN install.packages(\"nestedmodels\")  # Or install the development version from GitHub: # install.packages(\"devtools\") devtools::install_github(\"ashbythorpe/nestedmodels\")"},{"path":"https://ashbythorpe.github.io/nestedmodels/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Tidy Modelling for Nested Data","text":"Nested models often best used panel data. nested_resamples() function makes sure testing training data contain every unique value ‘id’. Fitting nested model data simple. don’t want nest data manually, use step_nest() inside workflow: Please note nestedmodels project released Contributor Code Conduct. contributing project, agree abide terms.","code":"library(nestedmodels) data <- example_nested_data  nested_data <- tidyr::nest(example_nested_data, data = -id)  nested_data #> # A tibble: 20 × 2 #>       id data              #>    <int> <list>            #>  1     1 <tibble [50 × 6]> #>  2     2 <tibble [50 × 6]> #>  3     3 <tibble [50 × 6]> #>  4     4 <tibble [50 × 6]> #>  5     5 <tibble [50 × 6]> #>  6     6 <tibble [50 × 6]> #>  7     7 <tibble [50 × 6]> #>  8     8 <tibble [50 × 6]> #>  9     9 <tibble [50 × 6]> #> 10    10 <tibble [50 × 6]> #> 11    11 <tibble [50 × 6]> #> 12    12 <tibble [50 × 6]> #> 13    13 <tibble [50 × 6]> #> 14    14 <tibble [50 × 6]> #> 15    15 <tibble [50 × 6]> #> 16    16 <tibble [50 × 6]> #> 17    17 <tibble [50 × 6]> #> 18    18 <tibble [50 × 6]> #> 19    19 <tibble [50 × 6]> #> 20    20 <tibble [50 × 6]> split <- nested_resamples(nested_data, rsample::initial_split())  data_tr <- rsample::training(split) data_tst <- rsample::testing(split) model <- parsnip::linear_reg() %>%   nested()  fit <- fit(model, z ~ x + y + a + b,             tidyr::nest(data_tr, data = -id))  predict(fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  32.7 #>  2  25.3 #>  3  47.7 #>  4  30.6 #>  5  20.9 #>  6  46.1 #>  7  22.8 #>  8  56.1 #>  9  26.5 #> 10  27.1 #> # … with 250 more rows recipe <- recipes::recipe(data_tr, z ~ x + y + a + b + id) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_model(model) %>%   workflows::add_recipe(recipe)  wf_fit <- fit(wf, data_tr)  predict(wf_fit, data_tst) #> # A tibble: 260 × 1 #>    .pred #>    <dbl> #>  1  32.7 #>  2  25.3 #>  3  47.7 #>  4  30.6 #>  5  20.9 #>  6  46.1 #>  7  22.8 #>  8  56.1 #>  9  26.5 #> 10  27.1 #> # … with 250 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with predictions — augment.nested_model_fit","title":"Augment data with predictions — augment.nested_model_fit","text":"generics::augment() method nested models. augment.nested_model_fit() add column(s) predictions given data.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"# S3 method for nested_model_fit augment(x, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with predictions — augment.nested_model_fit","text":"x nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::augment.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with predictions — augment.nested_model_fit","text":"data frame one added columns predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/augment.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augment data with predictions — augment.nested_model_fit","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 1:5)  nested_data <- tidyr::nest(data, data = -c(id, id2))  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  fitted <- fit(model, z ~ x + y + a + b, nested_data)  augment(fitted, example_nested_data) #> Warning: Some predictions failed. #> # A tibble: 1,000 × 7 #>        x     y     z     a     b .pred .resid #>    <int> <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> #>  1    49  48.5  29.1  44.7 50.0   24.5  4.55  #>  2    50  64.2  29.7  40.2 64.9   23.4  6.22  #>  3    51 -19.4  26.6  43.2 38.0   25.0  1.64  #>  4    52  41.0  28.8  66.4 61.7   25.3  3.56  #>  5    53 -94.2  23.9  18.2 -1.66  26.4 -2.45  #>  6    54  72.6  30.0  83.8 38.8   29.0  1.02  #>  7    55 -91.5  24.0  91.7 40.7   27.3 -3.29  #>  8    56 -50.5  25.5  79.8 55.4   26.2 -0.651 #>  9    57  90.3  30.6  50.3 33.8   28.4  2.25  #> 10    58  32.4  28.6  25.4 20.5   27.6  0.954 #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example nested data — example_nested_data","title":"Example nested data — example_nested_data","text":"dataset containing example data can nested. Mainly used examples testing.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example nested data — example_nested_data","text":"tibble 1000 rows 7 variables id column can nested, ranging 1 20. id2 Another column can nested, ranging 1 10. x numeric column depends 'id'. y sequential numeric column (added randomness), independent columns. z column dependent id, id2, x y. randomly generated numeric column, ranging 1 100. b randomly generated numeric column, centred around 50.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/example_nested_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example nested data — example_nested_data","text":"","code":"example_nested_data #> # A tibble: 1,000 × 7 #>       id   id2     x     y     z     a     b #>    <int> <int> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1     1    49  48.5  29.1  44.7 50.0  #>  2     1     1    50  64.2  29.7  40.2 64.9  #>  3     1     1    51 -19.4  26.6  43.2 38.0  #>  4     1     1    52  41.0  28.8  66.4 61.7  #>  5     1     1    53 -94.2  23.9  18.2 -1.66 #>  6     1     1    54  72.6  30.0  83.8 38.8  #>  7     1     1    55 -91.5  24.0  91.7 40.7  #>  8     1     1    56 -50.5  25.5  79.8 55.4  #>  9     1     1    57  90.3  30.6  50.3 33.8  #> 10     1     1    58  32.4  28.6  25.4 20.5  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the inner model of a nested model object — extract_inner_model","title":"Get the inner model of a nested model object — extract_inner_model","text":"Extract inner model nested_model object, workflow containing nested model.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"extract_inner_model(x, ...)  # S3 method for default extract_inner_model(x, ...)  # S3 method for nested_model extract_inner_model(x, ...)  # S3 method for workflow extract_inner_model(x, ...)  # S3 method for model_spec extract_inner_model(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the inner model of a nested model object — extract_inner_model","text":"x model spec workflow. ... used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the inner model of a nested model object — extract_inner_model","text":"model_spec object","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/extract_inner_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the inner model of a nested model object — extract_inner_model","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  extract_inner_model(model) #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset — fit.nested_model","title":"Fit a nested model to a dataset — fit.nested_model","text":"fit.model_spec() takes nested model specification fits inner model specification nested data frame given dataset.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"# S3 method for nested_model fit(   object,   formula,   data,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset — fit.nested_model","text":"object nested_model object (see nested()). formula object class formula. Passed parsnip::fit.model_spec(). contain variable nest . data data frame. used 'nested_model' object, data frame must already nested. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset — fit.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset — fit.nested_model","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  nested_data <- tidyr::nest(example_nested_data, data = -id)  fit(model, z ~ x + y + a + b, nested_data) #> Nested model fit, with 20 inner models #> # A tibble: 20 × 2 #>       id .model_fit #>    <int> <list>     #>  1     1 <fit[+]>   #>  2     2 <fit[+]>   #>  3     3 <fit[+]>   #>  4     4 <fit[+]>   #>  5     5 <fit[+]>   #>  6     6 <fit[+]>   #>  7     7 <fit[+]>   #>  8     8 <fit[+]>   #>  9     9 <fit[+]>   #> 10    10 <fit[+]>   #> 11    11 <fit[+]>   #> 12    12 <fit[+]>   #> 13    13 <fit[+]>   #> 14    14 <fit[+]>   #> 15    15 <fit[+]>   #> 16    16 <fit[+]>   #> 17    17 <fit[+]>   #> 18    18 <fit[+]>   #> 19    19 <fit[+]>   #> 20    20 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"generics::fit_xy() method nested models. called directly instead called workflows::fit.workflow().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"# S3 method for nested_model fit_xy(   object,   x,   y,   case_weights = NULL,   control = parsnip::control_parsnip(),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"object nested_model object (see nested()). x data frame predictors. y data frame outcome data. case_weights optional vector case weights. Passed parsnip::fit.model_spec(). control parsnip::control_parsnip() object. Passed parsnip::fit.model_spec(). ... Passed parsnip::fit.model_spec(). Currently unused.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"nested_model_fit object several elements: spec: model specification object (inner model nested model object) fit: tibble containing model fits nests correspond . inner_names: character vector names, used help nesting data predictions.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/fit_xy.nested_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a nested model to a dataset using an xy interface. — fit_xy.nested_model","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 11:20)  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  recipe <- recipes::recipe(data, z ~ x + y + id) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe) %>%   workflows::add_model(model)  fit(wf, data) #> ══ Workflow [trained] ══════════════════════════════════════════════════════════ #> Preprocessor: Recipe #> Model: nested_model() #>  #> ── Preprocessor ──────────────────────────────────────────────────────────────── #> 1 Recipe Step #>  #> • step_nest() #>  #> ── Model ─────────────────────────────────────────────────────────────────────── #> # A tibble: 10 × 2 #>    nest_id .model_fit #>    <fct>   <list>     #>  1 Nest 1  <fit[+]>   #>  2 Nest 2  <fit[+]>   #>  3 Nest 3  <fit[+]>   #>  4 Nest 4  <fit[+]>   #>  5 Nest 5  <fit[+]>   #>  6 Nest 6  <fit[+]>   #>  7 Nest 7  <fit[+]>   #>  8 Nest 8  <fit[+]>   #>  9 Nest 9  <fit[+]>   #> 10 Nest 10 <fit[+]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"parsnip::multi_predict() method nested models. Allows predictions made sub-models model object.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit multi_predict(object, new_data, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model(). new_data data frame - can nested non-nested. ... Passed onto parsnip::multi_predict()","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"tibble number rows new_data, unnested.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/multi_predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested model predictions across many sub-models — multi_predict.nested_model_fit","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 16:20)  nested_data <- tidyr::nest(data, data = -id2)  model <- parsnip::linear_reg(penalty = 1) %>%   parsnip::set_engine(\"glmnet\") %>%   nested()  fitted <- fit(model, z ~ x + y + a + b, nested_data)  parsnip::multi_predict(fitted, example_nested_data,   penalty = c(0.1, 0.2, 0.3) ) #> Warning: Some predictions failed. #> # A tibble: 1,000 × 1 #>    .pred            #>    <list>           #>  1 <tibble [3 × 2]> #>  2 <tibble [3 × 2]> #>  3 <tibble [3 × 2]> #>  4 <tibble [3 × 2]> #>  5 <tibble [3 × 2]> #>  6 <tibble [3 × 2]> #>  7 <tibble [3 × 2]> #>  8 <tibble [3 × 2]> #>  9 <tibble [3 × 2]> #> 10 <tibble [3 × 2]> #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Nested Model — nested","title":"Create a Nested Model — nested","text":"nested() turns model workflow nested model/workflow. is_nested() checks model workflow nested.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Nested Model — nested","text":"","code":"nested(x, ...)  is_nested(x, ...)  # S3 method for default nested(x, ...)  # S3 method for model_spec nested(x, ...)  # S3 method for nested_model nested(x, ...)  # S3 method for workflow nested(x, ...)  # S3 method for default is_nested(x, ...)  # S3 method for model_spec is_nested(x, ...)  # S3 method for workflow is_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Nested Model — nested","text":"x model specification workflow. ... currently used.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Nested Model — nested","text":"nested model object, workflow containing nested model. is_nested(), logical vector length 1.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Nested Model — nested","text":"","code":"model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  model #> Nested Model Specification #>  #> Inner model: #> Linear Regression Model Specification (regression) #>  #> Computational engine: lm  #>   is_nested(model) #> [1] TRUE  wf <- workflows::workflow() %>%   workflows::add_model(model)  is_nested(wf) #> [1] TRUE"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Create splits with nested data — nested_resamples","title":"Create splits with nested data — nested_resamples","text":"Use rsample split function nested data, nests act strata. almost guarantees every split contain data every nested data frame.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_resamples(   data,   resamples,   nesting_method = NULL,   size_action = c(\"truncate\", \"recycle\", \"recycle-random\", \"combine\", \"combine-random\",     \"combine-end\", \"error\"),   ... )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create splits with nested data — nested_resamples","text":"data data frame. resamples expression, function, formula string can evaluated produce rset rsplit object. nesting_method recipe, workflow NULL, used nest data data already nested (see Details). size_action different numbers splits produced nest, sizes matched? (see Details) ... Extra arguments pass resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create splits with nested data — nested_resamples","text":"Either rsplit object rset object, depending resamples.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create splits with nested data — nested_resamples","text":"function breaks data frame smaller, nested data frames. Resampling performed within nests, results combined together end. ensures split contains data every nest. However, function perform pooling (unlike rsample::make_strata()), may run issues nest small.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"nesting-data","dir":"Reference","previous_headings":"","what":"Nesting Data","title":"Create splits with nested data — nested_resamples","text":"data can nested several ways: nesting_method NULL data grouped (using dplyr::group_by()), data nested (see tidyr::nest() works). data grouped, assumed already nested, nested_resamples try find column contains nested data frames. nesting_method workflow recipe, recipe step created using  step_nest(), data nested using step recipe. convenient already created recipe workflow, saves line code.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"resample-evaluation","dir":"Reference","previous_headings":"","what":"Resample Evaluation","title":"Create splits with nested data — nested_resamples","text":"resamples argument can take many forms: function call, vfold_cv(v = 5). similar format rsample::nested_cv(). function, rsample::vfold_cv. purrr-style anonymous function, converted function using rlang::as_function(). string, evaluated using rlang::exec(). Every method evaluated data passed first argument (name 'data').","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"size-matching","dir":"Reference","previous_headings":"","what":"Size Matching","title":"Create splits with nested data — nested_resamples","text":"set resamples created nest can combined, must contain number splits. resampling methods, issue. rsample::vfold_cv(), example, reliably creates number splits defined 'v' argument. However, resampling methods, like rsample::rolling_origin(), depend size 'data' argument, therefore may produce different numbers resamples presented differently sized nests. size_action argument defines many ways matching sizes resample sets different numbers splits. methods either try reduce number splits set rset length set lowest number splits; opposite, rset number splits largest set. \"truncate\", default, means splits beyond required length removed. \"recycle\" means sets splits extended repeating elements required length reached, mimicking process vector recycling. advantage method created splits preserved. \"recycle-random\" similar process recycling, splits copied random spaces output, may important order resamples matters. process completely random, program makes sure every split copied roughly number times. \"combine\" gets rid excess splits combining previous ones. means training testing rows merged one split. Combining done systematically: set splits needs compacted set 5, first split combined sixth split, eleventh, sixteenth, etc. approach recommended, since clear benefit combined split . \"combine-random\" combines split random set splits, instead systematic process described previous method. , process actually random, split combined roughly number splits. \"combine-end\" combines every excess split last non-excess split. \"error\" throws error nest produce number splits.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nested_resamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create splits with nested data — nested_resamples","text":"","code":"nested_data <- example_nested_data %>%   tidyr::nest(data = -id)  grouped_data <- example_nested_data %>%   dplyr::group_by(id)  recipe <- recipes::recipe(example_nested_data, z ~ .) %>%   step_nest(id)  wf <- workflows::workflow() %>%   workflows::add_recipe(recipe)  nested_resamples(nested_data, rsample::vfold_cv()) #> #  10-fold cross-validation  #> # A tibble: 10 × 2 #>    splits            id     #>    <list>            <chr>  #>  1 <split [900/100]> Fold01 #>  2 <split [900/100]> Fold02 #>  3 <split [900/100]> Fold03 #>  4 <split [900/100]> Fold04 #>  5 <split [900/100]> Fold05 #>  6 <split [900/100]> Fold06 #>  7 <split [900/100]> Fold07 #>  8 <split [900/100]> Fold08 #>  9 <split [900/100]> Fold09 #> 10 <split [900/100]> Fold10  nested_resamples(   dplyr::group_by(example_nested_data, id),   ~ rsample::initial_split(.) ) #> <Training/Testing/Total> #> <740/260/1000>  nested_resamples(example_nested_data, ~ {   rsample::validation_split(.) }, nesting_method = recipe) #> # Validation Set Split (0.75/0.25)   #> # A tibble: 1 × 2 #>   splits            id         #>   <list>            <chr>      #> 1 <split [740/260]> validation  nested_resamples(example_nested_data, rsample::bootstraps,   times = 25, nesting_method = wf ) #> # Bootstrap sampling  #> # A tibble: 25 × 2 #>    splits             id          #>    <list>             <chr>       #>  1 <split [1000/370]> Bootstrap01 #>  2 <split [1000/344]> Bootstrap02 #>  3 <split [1000/380]> Bootstrap03 #>  4 <split [1000/379]> Bootstrap04 #>  5 <split [1000/352]> Bootstrap05 #>  6 <split [1000/363]> Bootstrap06 #>  7 <split [1000/357]> Bootstrap07 #>  8 <split [1000/374]> Bootstrap08 #>  9 <split [1000/372]> Bootstrap09 #> 10 <split [1000/366]> Bootstrap10 #> # … with 15 more rows  # nested nested resamples  nested_resamples(nested_data, rsample::nested_cv(   rsample::vfold_cv(),   rsample::bootstraps() )) #> # Nested resampling: #> #  outer: 10-fold cross-validation #> #  inner: Bootstrap sampling #> # A tibble: 10 × 3 #>    splits            id     inner_resamples #>    <list>            <chr>  <list>          #>  1 <split [900/100]> Fold01 <boot [25 × 2]> #>  2 <split [900/100]> Fold02 <boot [25 × 2]> #>  3 <split [900/100]> Fold03 <boot [25 × 2]> #>  4 <split [900/100]> Fold04 <boot [25 × 2]> #>  5 <split [900/100]> Fold05 <boot [25 × 2]> #>  6 <split [900/100]> Fold06 <boot [25 × 2]> #>  7 <split [900/100]> Fold07 <boot [25 × 2]> #>  8 <split [900/100]> Fold08 <boot [25 × 2]> #>  9 <split [900/100]> Fold09 <boot [25 × 2]> #> 10 <split [900/100]> Fold10 <boot [25 × 2]>"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nestedmodels-package.html","id":null,"dir":"Reference","previous_headings":"","what":"nestedmodels: Tidy Modelling for Nested Data — nestedmodels-package","title":"nestedmodels: Tidy Modelling for Nested Data — nestedmodels-package","text":"modelling framework nested data using 'tidymodels' ecosystem. Specify nest data using 'recipes' package, create testing training splits using 'rsample', fit models data using 'parsnip' 'workflows' packages. Allows model fit nested data.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/nestedmodels-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"nestedmodels: Tidy Modelling for Nested Data — nestedmodels-package","text":"Maintainer: Ashby Thorpe ashbythorpe@gmail.com (ORCID) contributors: Hadley Wickham hadley@rstudio.com (ORCID) [contributor]","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested Model Predictions — predict.nested_model_fit","title":"Nested Model Predictions — predict.nested_model_fit","text":"Apply fitted nested model generate different types predictions. stats::predict() / parsnip::predict_raw() methods nested model fits.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"# S3 method for nested_model_fit predict(object, new_data, type = NULL, opts = list(), ...)  # S3 method for nested_model_fit predict_raw(object, new_data, opts = list(), ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested Model Predictions — predict.nested_model_fit","text":"object nested_model_fit object produced fit.nested_model(). new_data data frame make predictions . Can nested non-nested. type singular character vector NULL. Passed parsnip::predict.model_fit(). opts list optional arguments. Passed parsnip::predict.model_fit(). ... Arguments underlying model's predict function. Passed parsnip::predict.model_fit().","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested Model Predictions — predict.nested_model_fit","text":"data frame model predictions. predict_raw(), matrix, data frame, vector list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/predict.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested Model Predictions — predict.nested_model_fit","text":"","code":"data <- dplyr::filter(example_nested_data, id %in% 5:15)  nested_data <- tidyr::nest(data, data = -id)  model <- parsnip::linear_reg() %>%   parsnip::set_engine(\"lm\") %>%   nested()  fitted <- fit(model, z ~ x + y + a + b, nested_data)  predict(fitted, example_nested_data) #> Warning: Some predictions failed. #> # A tibble: 1,000 × 1 #>    .pred #>    <dbl> #>  1    NA #>  2    NA #>  3    NA #>  4    NA #>  5    NA #>  6    NA #>  7    NA #>  8    NA #>  9    NA #> 10    NA #> # … with 990 more rows  parsnip::predict_raw(fitted, example_nested_data) #> Warning: Some predictions failed. #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                   1           2           3           4  #>          NA          NA  37.6319619  34.6675302  48.9534648  32.9415712  #>           5           6           7           8           9          10  #>  45.8397678  47.1841754  43.1352860  42.3881863  35.6477312  47.2081061  #>          11          12          13          14          15          16  #>  40.6555079  45.4181232  41.2040202  46.7792115  44.4373731  48.3988571  #>          17          18          19          20          21          22  #>  40.5440131  32.1688648  48.5258193  43.5221122  32.0952033  41.6197029  #>          23          24          25          26          27          28  #>  40.7089757  32.7541173  32.0640006  45.1652044  30.3157805  45.0106798  #>          29          30          31          32          33          34  #>  46.3454584  36.8788189  34.0243024  44.8696121  31.7896132  36.6176057  #>          35          36          37          38          39          40  #>  37.5103511  44.0099607  41.5118849  47.1318431  35.7775797  53.3682921  #>          41          42          43          44          45          46  #>  43.7354649  41.5104474  48.3590848  32.0641994  45.1734049  44.2209702  #>          47          48          49          50           1           2  #>  41.9862098  41.6871112  37.6096485  41.4406573  60.0262234  57.9752386  #>           3           4           5           6           7           8  #>  59.7343479  62.7541347  60.0519092  58.1765191  58.0936291  57.1523762  #>           9          10          11          12          13          14  #>  57.0379805  55.2115190  59.8094270  58.3606515  52.8335588  55.0243082  #>          15          16          17          18          19          20  #>  53.9338442  50.1080697  53.1660877  52.9348141  49.4996065  48.5304871  #>          21          22          23          24          25          26  #>  51.2501840  49.8909167  47.3404559  47.5148040  50.5442324  50.3227284  #>          27          28          29          30          31          32  #>  46.8712255  43.2607977  45.1797767  44.3283019  42.8747889  47.7669559  #>          33          34          35          36          37          38  #>  43.0519355  39.8008969  39.7971714  43.9129156  39.0025160  42.9337298  #>          39          40          41          42          43          44  #>  40.9821696  43.2342899  37.7671806  36.7960719  36.8436979  35.5445246  #>          45          46          47          48          49          50  #>  37.1840650  39.4344557  33.5125533  36.3283083  34.9105095  36.0586859  #>           1           2           3           4           5           6  #>  47.6270504  44.9779840  38.9374635  45.6040120  39.9995875  42.6771916  #>           7           8           9          10          11          12  #>  39.0842412  38.1573825  41.6624586  40.1410279  37.2942556  35.3571091  #>          13          14          15          16          17          18  #>  39.9791497  33.7271553  36.9598664  31.3087216  37.1522938  32.5407975  #>          19          20          21          22          23          24  #>  34.3787560  31.3314482  28.0155530  30.1316277  29.0110942  27.3069825  #>          25          26          27          28          29          30  #>  29.2992724  26.9808910  28.3713655  26.4926729  24.6028192  22.7136345  #>          31          32          33          34          35          36  #>  22.0220717  25.0605769  19.5532483  24.0512586  20.8009876  22.2872590  #>          37          38          39          40          41          42  #>  17.2784601  22.7430536  21.9177355  16.8666721  16.3499239  14.7423782  #>          43          44          45          46          47          48  #>  15.7407314  18.4255277  16.8997643  16.3302286  11.8593669  14.8871917  #>          49          50           1           2           3           4  #>  10.2563614  10.3298892  -4.6597627  -0.7729351  -1.9298875  -6.3903353  #>           5           6           7           8           9          10  #>   6.3429502   6.7001328  -0.8295463   8.0850894  -0.6711028   1.0427615  #>          11          12          13          14          15          16  #>  16.0514342  10.2374064  20.0777287  15.3062785  13.8410911  16.7587516  #>          17          18          19          20          21          22  #>  22.9417777  20.1170145  28.5519583  23.5208137  18.4518123  26.6187735  #>          23          24          25          26          27          28  #>  33.2655085  28.5345982  39.8935201  33.4665089  38.3795749  39.4056647  #>          29          30          31          32          33          34  #>  32.4826788  38.8494729  40.2738227  39.9392240  42.7028124  46.0474268  #>          35          36          37          38          39          40  #>  46.5327054  46.2398823  42.4489682  50.2040629  52.8044990  46.8118580  #>          41          42          43          44          45          46  #>  44.0987255  55.3271360  58.4921417  57.7546026  60.6917431  52.6197356  #>          47          48          49          50           1           2  #>  71.8127670  64.3434586  61.9503640  64.3456740  12.6178982  15.9579781  #>           3           4           5           6           7           8  #>  10.6516537   7.9941765  20.2339026   4.1767053  14.1355939  13.6570942  #>           9          10          11          12          13          14  #>   6.8265423  11.1436191  16.1651110  20.9646700  12.6646558  18.0317407  #>          15          16          17          18          19          20  #>  16.2314779  13.9287035  14.4495542  22.8200182  24.4623801  14.1764728  #>          21          22          23          24          25          26  #>  12.1373103  22.0332494  22.4213244  27.9869683  23.4815512  14.5084430  #>          27          28          29          30          31          32  #>  20.2110573  22.1601193  22.4900335  32.1739308  17.9158363  26.4835242  #>          33          34          35          36          37          38  #>  29.3073776  19.6526993  20.4506191  23.5028700  26.9377671  20.0697628  #>          39          40          41          42          43          44  #>  29.4252753  29.7907190  29.4226469  27.9681131  36.4067197  30.4968134  #>          45          46          47          48          49          50  #>  27.9950469  39.2499585  40.0480645  38.7637573  32.6845166  34.3517123  #>           1           2           3           4           5           6  #>  58.6554884  52.7758770  59.1136089  56.0251534  53.7841345  56.2272744  #>           7           8           9          10          11          12  #>  52.0875110  53.5655861  54.8031787  49.6824029  46.4993234  50.0825963  #>          13          14          15          16          17          18  #>  48.9426382  44.1945380  45.5915874  49.2596970  56.3597240  40.9450382  #>          19          20          21          22          23          24  #>  44.9299528  47.6287002  43.2544530  45.8374365  44.9412198  45.5603300  #>          25          26          27          28          29          30  #>  44.9251559  45.0189507  44.4893216  35.0739765  45.9922116  42.5517345  #>          31          32          33          34          35          36  #>  31.5419386  37.9684869  31.8247371  41.0757635  38.4770884  36.6007458  #>          37          38          39          40          41          42  #>  32.8898397  36.1740439  35.9159420  32.8090816  29.5765640  40.7226928  #>          43          44          45          46          47          48  #>  36.0163276  32.7715529  27.5472294  29.8313247  23.8872894  28.9691656  #>          49          50           1           2           3           4  #>  30.4639153  22.3694375  67.4301750  56.3641727  63.3770162  63.3282906  #>           5           6           7           8           9          10  #>  60.8231323  59.9416137  55.9034984  62.8529149  62.5708989  63.2669514  #>          11          12          13          14          15          16  #>  68.3810391  68.1360765  66.8051949  60.4203894  64.4124677  69.1867473  #>          17          18          19          20          21          22  #>  66.4676480  60.7817937  64.4086397  62.9247264  70.5821959  65.1999972  #>          23          24          25          26          27          28  #>  68.1761496  62.7962592  61.2844191  63.5496921  72.4839440  66.3976033  #>          29          30          31          32          33          34  #>  72.5093924  70.1426021  66.7839671  66.6470649  65.4266072  65.6433722  #>          35          36          37          38          39          40  #>  64.9991391  69.5088061  72.6192642  66.7288387  70.5814474  70.7230023  #>          41          42          43          44          45          46  #>  72.9205104  67.6599723  75.3569122  66.3664665  66.9391441  71.3213974  #>          47          48          49          50           1           2  #>  64.8486959  64.8050604  73.9185089  72.3672801  35.2869863  48.0989095  #>           3           4           5           6           7           8  #>  36.2594384  47.3496358  34.5153320  42.8911928  49.4947234  46.8839578  #>           9          10          11          12          13          14  #>  39.1606905  45.7852838  35.4563535  48.5450551  41.5238941  43.0631028  #>          15          16          17          18          19          20  #>  45.8011953  34.6886035  38.8863423  43.8014706  36.4075476  51.3896708  #>          21          22          23          24          25          26  #>  41.6585191  38.9908428  45.3642732  39.4249230  40.6142592  36.4266625  #>          27          28          29          30          31          32  #>  55.3555374  40.9995792  45.9642066  47.6047924  40.6866584  51.9413918  #>          33          34          35          36          37          38  #>  53.8551732  42.4826266  54.5580218  56.7909426  44.0116956  43.6185562  #>          39          40          41          42          43          44  #>  51.2759960  50.6942094  47.4186889  46.4033258  48.8416828  53.8120641  #>          45          46          47          48          49          50  #>  42.0583968  54.5283986  45.0899179  51.7082706  60.1344676  48.6807409  #>           1           2           3           4           5           6  #>  12.4539686   7.3277666   8.8241755   9.4342860  18.7285734  25.3102923  #>           7           8           9          10          11          12  #>   5.3873881  20.3161579  31.1943961  24.2975665  13.0124614   9.0670309  #>          13          14          15          16          17          18  #>  23.8014856  32.2031088  20.4280224  26.5132095  21.7482036  17.6894767  #>          19          20          21          22          23          24  #>  36.3228073  35.8395574  13.0662829  37.1729722  33.7166645  29.1201793  #>          25          26          27          28          29          30  #>  25.0176581  22.7464219  15.1689437  11.4293465  24.3833775  19.1135294  #>          31          32          33          34          35          36  #>  33.3759354  38.0382440  21.3448039  37.3692517  17.6142252  34.3958260  #>          37          38          39          40          41          42  #>  28.2629230  24.5774928  38.1750095  21.9652849  26.3396000  37.7524645  #>          43          44          45          46          47          48  #>  14.8950216  26.5671625  15.5942890  19.3566025  20.4875612  23.3167278  #>          49          50           1           2           3           4  #>  24.4140344  26.5813349  31.8417641  40.2994324  34.6409752  39.0592006  #>           5           6           7           8           9          10  #>  36.8345046  41.0420969  32.1350578  26.9688458  49.8119991  46.3006879  #>          11          12          13          14          15          16  #>  47.1489074  39.7488633  58.6362942  59.3719706  41.2767033  58.9487117  #>          17          18          19          20          21          22  #>  56.5415605  61.9480501  66.2836627  57.3516566  68.4344143  54.7828809  #>          23          24          25          26          27          28  #>  60.4023060  71.3612328  73.3034496  75.3584465  62.0194758  63.5701553  #>          29          30          31          32          33          34  #>  65.6625583  71.7073614  78.7254917  79.1349128  80.4311489  82.1185507  #>          35          36          37          38          39          40  #>  82.7057521  92.1475406  84.6981243  83.4236188  78.0558329  88.5457438  #>          41          42          43          44          45          46  #>  88.6545834  98.7425898  90.7964204  88.4693719  91.6455289 104.5759794  #>          47          48          49          50           1           2  #>  97.2528679 105.9453477 100.6166761 104.6145182  43.6946109  47.7436782  #>           3           4           5           6           7           8  #>  48.5066010  48.6921365  51.3078385  45.2649564  53.5026143  45.8205012  #>           9          10          11          12          13          14  #>  49.2426855  47.0611171  53.7941337  52.2044752  49.4328923  53.4458424  #>          15          16          17          18          19          20  #>  49.1537807  57.3432681  52.7335145  55.8099069  55.7429048  57.6857122  #>          21          22          23          24          25          26  #>  57.0456806  61.0721955  62.1630024  58.8017271  60.7163645  58.0715075  #>          27          28          29          30          31          32  #>  61.5298623  61.7265050  60.5305004  61.4287467  55.1953300  65.3877370  #>          33          34          35          36          37          38  #>  61.5237645  68.4515213  63.0780219  59.7022799  62.1074827  63.7355654  #>          39          40          41          42          43          44  #>  67.6034835  70.8445246  69.2889159  65.1792696  68.8095712  65.9851224  #>          45          46          47          48          49          50  #>  65.1439401  73.7479839  65.3615468  71.8035759  65.8045864  74.7195222  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                                          #>          NA          NA          NA          NA          NA          NA  #>                                                  #>          NA          NA          NA          NA"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, fit, fit_xy, glance, tidy","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":null,"dir":"Reference","previous_headings":"","what":"Nest transformation — step_nest","title":"Nest transformation — step_nest","text":"step_nest() creates specification recipe step convert specified data single model term, specifying 'nest' row dataset corresponds .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nest transformation — step_nest","text":"","code":"step_nest(   recipe,   ...,   role = \"predictor\",   trained = FALSE,   names = NULL,   lookup_table = NULL,   skip = FALSE,   id = recipes::rand_id(\"nest\") )"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nest transformation — step_nest","text":"recipe recipe object. step added sequence operations recipe. ... One selector functions choose variables. step_nest, indicates variables nested. See recipes::selections() details. role model terms created step, analysis role assigned? default, new columns created step original variables used predictors model. trained logical indicate quantities preprocessing estimated. names names variables selected ... stored preprocessing step trained recipes::prep(). lookup_table table describing values selected columns correspond 'nest_id' stored preprocessing step trained recipes::prep(). skip logical. step skipped recipe baked recipes::bake()? operations baked recipes::prep() run, operations may able conducted new data (e.g. processing outcome variable(s)). Care taken using skip = TRUE may affect computations subsequent operations. id character string unique step identify .","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nest transformation — step_nest","text":"updated version recipe new step added sequence existing operations.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Nest transformation — step_nest","text":"step_nest() create single nominal variable (named 'nest_id') set variables (type). Every unique combination specified columns receive single nest id. recipe step designed use nested models, since model fitted data corresponding nest id. Using recipe often easier reliable nesting data manually. nest id corresponding unique combination column values decided recipe prepped (recipe contained workflow, happens workflow fitted). means using prepped recipe new data (using recipes::prep() workflows::predict.workflow()), unique combinations nesting columns must also exist training data. warned case. using 'rsample' package create splits presents issue, may want consider using nested_resamples(). step_nest() designed nesting transformed data 'nest_id' column equivalent following action non-transformed data:","code":"data %>%   dplyr::group_by(...) %>% # '...' represents your specified terms   tidyr::nest()"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"tidying","dir":"Reference","previous_headings":"","what":"Tidying","title":"Nest transformation — step_nest","text":"tidy() step, tibble returned showing unique value terms specified correspond nest id.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"case-weights","dir":"Reference","previous_headings":"","what":"Case weights","title":"Nest transformation — step_nest","text":"underlying operation allow case weights.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/step_nest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nest transformation — step_nest","text":"","code":"recipe <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(id)  recipe %>%   recipes::prep() %>%   recipes::bake(NULL) #> # A tibble: 1,000 × 3 #>        x     z nest_id #>    <int> <dbl> <fct>   #>  1    49  29.1 Nest 1  #>  2    50  29.7 Nest 1  #>  3    51  26.6 Nest 1  #>  4    52  28.8 Nest 1  #>  5    53  23.9 Nest 1  #>  6    54  30.0 Nest 1  #>  7    55  24.0 Nest 1  #>  8    56  25.5 Nest 1  #>  9    57  30.6 Nest 1  #> 10    58  28.6 Nest 1  #> # … with 990 more rows  recipe2 <- recipes::recipe(example_nested_data, z ~ x + id) %>%   step_nest(-c(x, z))  recipe2 %>%   recipes::prep() %>%   recipes::bake(NULL) #> # A tibble: 1,000 × 3 #>        x     z nest_id #>    <int> <dbl> <fct>   #>  1    49  29.1 Nest 1  #>  2    50  29.7 Nest 1  #>  3    51  26.6 Nest 1  #>  4    52  28.8 Nest 1  #>  5    53  23.9 Nest 1  #>  6    54  30.0 Nest 1  #>  7    55  24.0 Nest 1  #>  8    56  25.5 Nest 1  #>  9    57  30.6 Nest 1  #> 10    58  28.6 Nest 1  #> # … with 990 more rows"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"Use broom functions fitted nested models. tidy.nested_model_fit() summarises components model within nested model fit, indicating nested data frame row corresponds . glance.nested_model_fit() summarises nested model, returning tibble::tibble() 1 row. glance_nested() summarises model within nested model fit, returning tibble::tibble() number rows number inner models.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"# S3 method for nested_model_fit tidy(x, ...)  # S3 method for nested_model_fit glance(x, ...)  glance_nested(x, ...)"},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"x nested_model_fit object produced fit.nested_model(). ... Additional arguments passed respective functions. (e.g. tidy.nested_model_fit(), parsnip::tidy.model_fit()).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"tibble::tibble(). glance.nested_model_fit(), tibble 1 row.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"generics::glance() states glance() methods always return 1 row outputs non-empty inputs. 'nestedmodels' package exception: glance() methods combine rows produce result single row. Specifically: column contains 1 unique value, value used. column numeric, mean calculated. Otherwise, results combined list.","code":""},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/reference/tidy.nested_model_fit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a nested model into a tidy tibble — tidy.nested_model_fit","text":"","code":"if (require(\"broom\")) {   data <- dplyr::filter(example_nested_data, id %in% 1:5)    model <- parsnip::linear_reg() %>%     parsnip::set_engine(\"lm\") %>%     nested()    fit <- fit(     model, z ~ x + y + a + b,     dplyr::group_by(data, id)   )    tidy(fit)   glance(fit)   glance_nested(fit) } #> Loading required package: broom #> # A tibble: 5 × 13 #>      id r.squared adj.r…¹ sigma stati…² p.value    df logLik   AIC   BIC devia…³ #>   <int>     <dbl>   <dbl> <dbl>   <dbl>   <dbl> <dbl>  <dbl> <dbl> <dbl>   <dbl> #> 1     1    0.161  0.0861  18.0     2.15 8.95e-2     4  -213.  438.  449.  14617. #> 2     2    0.359  0.302   15.3     6.30 4.12e-4     4  -205.  421.  433.  10476. #> 3     3    0.218  0.149   12.9     3.14 2.31e-2     4  -196.  404.  416.   7477. #> 4     4    0.0867 0.00554  7.25    1.07 3.83e-1     4  -167.  347.  358.   2368. #> 5     5    0.0934 0.0128  18.5     1.16 3.42e-1     4  -214.  440.  452.  15397. #> # … with 2 more variables: df.residual <int>, nobs <int>, and abbreviated #> #   variable names ¹​adj.r.squared, ²​statistic, ³​deviance"},{"path":[]},{"path":"https://ashbythorpe.github.io/nestedmodels/news/index.html","id":"nestedmodels-103","dir":"Changelog","previous_headings":"","what":"nestedmodels 1.0.3","title":"nestedmodels 1.0.3","text":"CRAN release: 2023-01-05 Used expect_snapshot() test printing (Thanks contribution Emil Hvitfeldt). Removed ‘forcats’ dependency.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/news/index.html","id":"nestedmodels-102","dir":"Changelog","previous_headings":"","what":"nestedmodels 1.0.2","title":"nestedmodels 1.0.2","text":"CRAN release: 2022-11-03 Made sure package works latest/development versions ‘tidyselect’ ‘purrr’ (Thanks contribution Hadley Wickham).","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/news/index.html","id":"nestedmodels-101","dir":"Changelog","previous_headings":"","what":"nestedmodels 1.0.1","title":"nestedmodels 1.0.1","text":"CRAN release: 2022-10-10 Removed uses <<- CRAN resubmission.","code":""},{"path":"https://ashbythorpe.github.io/nestedmodels/news/index.html","id":"nestedmodels-100","dir":"Changelog","previous_headings":"","what":"nestedmodels 1.0.0","title":"nestedmodels 1.0.0","text":"Submitted CRAN. Added NEWS.md file track changes package.","code":""}]
